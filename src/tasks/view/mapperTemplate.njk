{% for class in metafile.classes %}
import { {{class.name}} } from '{{class.viewModelFromMapper}}';
import { {{class.baseName}} } from '{{class.baseModelFromMapper}}';
{% for import in metafile.imports %}
{%if import.forMapper ===true%}
{% if import.dependencyMappers.indexOf(class.name) > -1 %}
import {{import.type }} from '{{import.path}}';
{% elif 'Mapper' not in import.type%}
import {{import.type }} from '{{import.path}}';
{%endif%}
{%endif%}
{% endfor %}
{% endfor%}

{% for class in metafile.classes %}
export class {{class.name}}Mapper {
      public static {% if class.isToViewAsync %}async{% endif %} to{{class.name}}(model: {{class.baseName}}): {% if class.isToViewAsync %}Promise<{% endif %}{{class.name}}{% if class.isToViewAsync %}>{% endif %} {
            let result = new {{class.name}}();
{% for field in class.fields %}
{% if field.ignoredInView===false %}
{%if field.fieldConvertFunction%}
            result.{{field.name}}  = {% if field.fieldConvertFunction.toView.isAsync %}await{% endif%} {{field.fieldConvertFunction.toView.function}}(model);
{% elif field.isArray %}
{% if field.needGeneratedMapper%}
            if (model.{{field.baseModelName}}) {
                  let tmp = await model.{{field.baseModelName}}.map(async function(item: any ) {return await {{field.type}}Mapper.to{{field.type}}(item) });
                  tmp.forEach(async mp => { 
                       let p =await mp;
                       result.{{field.name}}.push(p)});                  
            }
{%else%}
            if (model.{{field.baseModelName}}) {
                  result.{{field.name}} =  model.{{field.baseModelName}}.map(function(item: any ) { return JSON.parse(JSON.stringify(item)); });
            }
{%endif%}
{% else %}
{% if field.needGeneratedMapper %}
            if (model.{{field.baseModelName}}) {
                  result.{{field.name}} =  await {{field.type}}Mapper.to{{field.type}}(model.{{field.baseModelName}});
            }
{% elif field.isComplexType %}
            if (model.{{field.baseModelName}}) {
                  result.{{field.name}} = JSON.parse(JSON.stringify(model.{{field.baseModelName}}));
            }
{% else %}
            result.{{field.name}} = model.{{field.baseModelName}}{% if field.toStringWanted %}.toString(){% endif%};
{% endif %}
{% endif %}
{% endif %}
{%endfor%}
            return result;
      }
      public static {% if class.isFromViewAsync %}async{% endif %} from{{class.name}}(viewModel: {{class.name}}): {% if class.isFromViewAsync %}Promise<{%endif%}{{class.baseName}}{% if class.isFromViewAsync %}>{%endif%} {
            let result = new {{class.baseName}}();
{% for field in class.fields %}
{% if field.ignoredInView===false %}
{%if field.fieldConvertFunction%}
            result.{{field.baseModelName}}  = {% if field.fieldConvertFunction.fromView.isAsync %}await{% endif%} {{field.fieldConvertFunction.fromView.function}}(viewModel);
{% elif field.isArray %}
{% if field.needGeneratedMapper %}
            if (viewModel.{{field.name}}) {
                  let tmp = await viewModel.{{field.name}}.map(async function(item: any ) {return await {{field.type}}Mapper.from{{field.type}}(item) });
                  tmp.forEach(async mp => { 
                       let p =await mp;
                       result.{{field.baseModelName}}.push(p)});                  
            }
{% else %}
            if (viewModel.{{field.name}}) {
                  result.{{field.baseModelName}} =  viewModel.{{field.name}}.map(function(item: any ) { return JSON.parse(JSON.stringify( item )); });
            }
{% endif %}
{% else %}
{% if field.needGeneratedMapper %}
            if (viewModel.{{field.name}}) {
                  result.{{field.baseModelName}} =  await {{field.type}}Mapper.from{{field.type}}(viewModel.{{field.name}});
            }
{% elif field.isComplexType %}
            if (viewModel.{{field.name}}) {
                  result.{{field.baseModelName}} = JSON.parse(JSON.stringify(viewModel.{{field.name}}));
            }
{% else %}
            result.{{field.baseModelName}} = {% if field.toStringWanted %}parseInt({% endif %}viewModel.{{field.name}}{% if field.toStringWanted %},10){% endif %};
{% endif %}
{% endif %}
{% endif %}
{%endfor%}
            return result;
      }
}
{%endfor%}
