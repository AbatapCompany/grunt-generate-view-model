{% for import in metafile.imports %}
import { {{import.classType}} } from '{{ import.mapperPath }}';
{% endfor %}

{% for class in metafile.classes %}
import { {{class.name}} } from '{{class.viewModelFromMapper}}';
{% endfor%}

{% for class in metafile.classes %}
export class {{class.name}}Mapper {
      public static async to{{class.name}}(model: any /*{{class.baseName}}*/): Promise<{{class.name}}> {
            let result = new {{class.name}}();
{% for field in class.fields %}
{% if field.ignoredInView===false %}
{%if field.fieldConvertFunction%}
            result.{{field.name}}  = {% if field.fieldConvertFunction.isAsync%}await {% endif%} {{field.fieldConvertFunction.func}}(model);
{% elif field.isArray %}
            if (model.{{field.baseModelName}}) {
                  result.{{field.name}} =  model.{{field.baseModelName}}.map(function(item: any ) { return JSON.parse(JSON.stringify(model.{{field.baseModelName}})); });
            }
{% else %}
{% if field.isComplexType %}
            if (model.{{field.baseModelName}}) {
                  result.{{field.name}} = JSON.parse(JSON.stringify(model.{{field.baseModelName}}));
            }
{% else %}
            result.{{field.name}} = model.{{field.baseModelName}}{% if field.toStringWanted %}.toString(){% endif%};
{% endif %}
{% endif %}
{% endif %}
{%endfor%}
            return result;
      }
}
{%endfor%}
